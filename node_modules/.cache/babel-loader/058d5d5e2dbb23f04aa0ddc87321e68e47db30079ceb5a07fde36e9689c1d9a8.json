{"ast":null,"code":"function getContentFromDataUrl(dataURL) {\n  return dataURL.split(/,/)[1];\n}\nexport function isDataUrl(url) {\n  return url.search(/^(data:)/) !== -1;\n}\nexport function makeDataUrl(content, mimeType) {\n  return `data:${mimeType};base64,${content}`;\n}\nexport async function fetchAsDataURL(url, init, process) {\n  const res = await fetch(url, init);\n  if (res.status === 404) {\n    throw new Error(`Resource \"${res.url}\" not found`);\n  }\n  const blob = await res.blob();\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onerror = reject;\n    reader.onloadend = () => {\n      try {\n        resolve(process({\n          res,\n          result: reader.result\n        }));\n      } catch (error) {\n        reject(error);\n      }\n    };\n    reader.readAsDataURL(blob);\n  });\n}\nconst cache = {};\nfunction getCacheKey(url, contentType, includeQueryParams) {\n  let key = url.replace(/\\?.*/, '');\n  if (includeQueryParams) {\n    key = url;\n  }\n  // font resource\n  if (/ttf|otf|eot|woff2?/i.test(key)) {\n    key = key.replace(/.*\\//, '');\n  }\n  return contentType ? `[${contentType}]${key}` : key;\n}\nexport async function resourceToDataURL(resourceUrl, contentType, options) {\n  const cacheKey = getCacheKey(resourceUrl, contentType, options.includeQueryParams);\n  if (cache[cacheKey] != null) {\n    return cache[cacheKey];\n  }\n  // ref: https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest#Bypassing_the_cache\n  if (options.cacheBust) {\n    // eslint-disable-next-line no-param-reassign\n    resourceUrl += (/\\?/.test(resourceUrl) ? '&' : '?') + new Date().getTime();\n  }\n  let dataURL;\n  try {\n    const content = await fetchAsDataURL(resourceUrl, options.fetchRequestInit, _ref => {\n      let {\n        res,\n        result\n      } = _ref;\n      if (!contentType) {\n        // eslint-disable-next-line no-param-reassign\n        contentType = res.headers.get('Content-Type') || '';\n      }\n      return getContentFromDataUrl(result);\n    });\n    dataURL = makeDataUrl(content, contentType);\n  } catch (error) {\n    dataURL = options.imagePlaceholder || '';\n    let msg = `Failed to fetch resource: ${resourceUrl}`;\n    if (error) {\n      msg = typeof error === 'string' ? error : error.message;\n    }\n    if (msg) {\n      console.warn(msg);\n    }\n  }\n  cache[cacheKey] = dataURL;\n  return dataURL;\n}","map":{"version":3,"names":["getContentFromDataUrl","dataURL","split","isDataUrl","url","search","makeDataUrl","content","mimeType","fetchAsDataURL","init","process","res","fetch","status","Error","blob","Promise","resolve","reject","reader","FileReader","onerror","onloadend","result","error","readAsDataURL","cache","getCacheKey","contentType","includeQueryParams","key","replace","test","resourceToDataURL","resourceUrl","options","cacheKey","cacheBust","Date","getTime","fetchRequestInit","_ref","headers","get","imagePlaceholder","msg","message","console","warn"],"sources":["C:\\Users\\nguye\\receipt-app\\node_modules\\html-to-image\\src\\dataurl.ts"],"sourcesContent":["import { Options } from './types'\n\nfunction getContentFromDataUrl(dataURL: string) {\n  return dataURL.split(/,/)[1]\n}\n\nexport function isDataUrl(url: string) {\n  return url.search(/^(data:)/) !== -1\n}\n\nexport function makeDataUrl(content: string, mimeType: string) {\n  return `data:${mimeType};base64,${content}`\n}\n\nexport async function fetchAsDataURL<T>(\n  url: string,\n  init: RequestInit | undefined,\n  process: (data: { result: string; res: Response }) => T,\n): Promise<T> {\n  const res = await fetch(url, init)\n  if (res.status === 404) {\n    throw new Error(`Resource \"${res.url}\" not found`)\n  }\n  const blob = await res.blob()\n  return new Promise<T>((resolve, reject) => {\n    const reader = new FileReader()\n    reader.onerror = reject\n    reader.onloadend = () => {\n      try {\n        resolve(process({ res, result: reader.result as string }))\n      } catch (error) {\n        reject(error)\n      }\n    }\n\n    reader.readAsDataURL(blob)\n  })\n}\n\nconst cache: { [url: string]: string } = {}\n\nfunction getCacheKey(\n  url: string,\n  contentType: string | undefined,\n  includeQueryParams: boolean | undefined,\n) {\n  let key = url.replace(/\\?.*/, '')\n\n  if (includeQueryParams) {\n    key = url\n  }\n\n  // font resource\n  if (/ttf|otf|eot|woff2?/i.test(key)) {\n    key = key.replace(/.*\\//, '')\n  }\n\n  return contentType ? `[${contentType}]${key}` : key\n}\n\nexport async function resourceToDataURL(\n  resourceUrl: string,\n  contentType: string | undefined,\n  options: Options,\n) {\n  const cacheKey = getCacheKey(\n    resourceUrl,\n    contentType,\n    options.includeQueryParams,\n  )\n\n  if (cache[cacheKey] != null) {\n    return cache[cacheKey]\n  }\n\n  // ref: https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest#Bypassing_the_cache\n  if (options.cacheBust) {\n    // eslint-disable-next-line no-param-reassign\n    resourceUrl += (/\\?/.test(resourceUrl) ? '&' : '?') + new Date().getTime()\n  }\n\n  let dataURL: string\n  try {\n    const content = await fetchAsDataURL(\n      resourceUrl,\n      options.fetchRequestInit,\n      ({ res, result }) => {\n        if (!contentType) {\n          // eslint-disable-next-line no-param-reassign\n          contentType = res.headers.get('Content-Type') || ''\n        }\n        return getContentFromDataUrl(result)\n      },\n    )\n    dataURL = makeDataUrl(content, contentType!)\n  } catch (error) {\n    dataURL = options.imagePlaceholder || ''\n\n    let msg = `Failed to fetch resource: ${resourceUrl}`\n    if (error) {\n      msg = typeof error === 'string' ? error : error.message\n    }\n\n    if (msg) {\n      console.warn(msg)\n    }\n  }\n\n  cache[cacheKey] = dataURL\n  return dataURL\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}